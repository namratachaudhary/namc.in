<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>System Design on Namc's blog</title><link>/tags/system-design/</link><description>Recent content in System Design on Namc's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 16 Apr 2019 14:02:18 -0700</lastBuildDate><atom:link href="/tags/system-design/index.xml" rel="self" type="application/rss+xml"/><item><title>Retries, Timeouts and Backoff</title><link>/posts/retries-timeouts-backoff/</link><pubDate>Tue, 16 Apr 2019 14:02:18 -0700</pubDate><guid>/posts/retries-timeouts-backoff/</guid><description>Distributed systems are hard. While we learn a lot about making highly available systems, we often overlook resiliency in system design.
Sure we have heard about fault-tolerant, but what is &amp;ldquo;resilience&amp;rdquo; now? Personally, I like to define it a system&amp;rsquo;s ability to handle and eventually recover from unexpected conditions. There are several ways to go about making your systems resilient to failure, but in this post, we will focus on following</description></item></channel></rss>